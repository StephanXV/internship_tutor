# Root logger option
log4j.rootLogger=ERROR, stdout, file

# Redirect log messages to console
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

# Redirect log messages to a log file, support file rolling.
#giornaliero
log4j.appender.file=org.apache.log4j.DailyRollingFileAppender 
#nome file piu eventuale percorso altrimenti va in /apache-tomcat/bin/nome
#es: C:\\logigng.log
log4j.appender.file.File=log4j-application.log
log4j.appender.file.MaxFileSize=1MB
log4j.appender.file.MaxBackupIndex=10
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n


#PATTERN
# %d{yyyy-MM-dd HH:mm:ss} = Date and time format, refer to SimpleDateFormat JavaDoc.
# %-5p = The logging priority, like DEBUG or ERROR. The -5 is optional, for the pretty print format.
# %c{1} = The logging name we set via getLogger(), refer to log4j PatternLayout guide.
# %L = The line number from where the logging request.
# %m%n = The message to log and line break.


#To implements log4j in a class:
    # final static Logger logger = Logger.getLogger(Home.class);
    # logger.error("Exception : ", ex);